
week3.o:     file format elf32-avr


Disassembly of section .text:

00000000 <__vector_17>:
} release_flag;

/* Interrupts */
/* Timer 1 manages system time. */
ISR(TIMER1_COMPA_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
    time_ms++;
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	90 91 00 00 	lds	r25, 0x0000
  1a:	a0 91 00 00 	lds	r26, 0x0000
  1e:	b0 91 00 00 	lds	r27, 0x0000
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	a1 1d       	adc	r26, r1
  26:	b1 1d       	adc	r27, r1
  28:	80 93 00 00 	sts	0x0000, r24
  2c:	90 93 00 00 	sts	0x0000, r25
  30:	a0 93 00 00 	sts	0x0000, r26
  34:	b0 93 00 00 	sts	0x0000, r27
}
  38:	bf 91       	pop	r27
  3a:	af 91       	pop	r26
  3c:	9f 91       	pop	r25
  3e:	8f 91       	pop	r24
  40:	0f 90       	pop	r0
  42:	0f be       	out	0x3f, r0	; 63
  44:	0f 90       	pop	r0
  46:	1f 90       	pop	r1
  48:	18 95       	reti

0000004a <__vector_32>:

/* Timer 3 manages the Yellow LED */
ISR(TIMER3_COMPA_vect)
{
  4a:	1f 92       	push	r1
  4c:	0f 92       	push	r0
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	0f 92       	push	r0
  52:	11 24       	eor	r1, r1
  54:	2f 93       	push	r18
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
    PORTC ^= (1 << PORTC7);
  5a:	88 b1       	in	r24, 0x08	; 8
  5c:	80 58       	subi	r24, 0x80	; 128
  5e:	88 b9       	out	0x08, r24	; 8
    if ((PINB & (1 << PB3)) == 0)
  60:	1b 99       	sbic	0x03, 3	; 3
  62:	00 c0       	rjmp	.+0      	; 0x64 <__vector_32+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	2f ef       	ldi	r18, 0xFF	; 255
  66:	81 ee       	ldi	r24, 0xE1	; 225
  68:	94 e0       	ldi	r25, 0x04	; 4
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	80 40       	sbci	r24, 0x00	; 0
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	01 f4       	brne	.+0      	; 0x72 <__vector_32+0x28>
  72:	00 c0       	rjmp	.+0      	; 0x74 <__vector_32+0x2a>
  74:	00 00       	nop
    {
      /* Since Timer1 does not preempt this timer, this makes our time
       * management inaccurate.
       */
      _delay_ms(100);
      release_flag = TRUE;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	90 93 00 00 	sts	0x0000, r25
  7e:	80 93 00 00 	sts	0x0000, r24
    }
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <init>:

/* Local Functions */
void init()
{
    /* Initialize our system time and release flag. */
    time_ms = 0;
  92:	10 92 00 00 	sts	0x0000, r1
  96:	10 92 00 00 	sts	0x0000, r1
  9a:	10 92 00 00 	sts	0x0000, r1
  9e:	10 92 00 00 	sts	0x0000, r1
    release_flag = 0;
  a2:	10 92 00 00 	sts	0x0000, r1
  a6:	10 92 00 00 	sts	0x0000, r1

    /* Initizalize our LED Ports */
    DDRC |= (1 << DDC7);
  aa:	3f 9a       	sbi	0x07, 7	; 7
    DDRD |= (1 << DDD5) | (1 << DDD6);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 66       	ori	r24, 0x60	; 96
  b0:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << DDB6);
  b2:	26 9a       	sbi	0x04, 6	; 4

    /* Initialize the LED values. On board Green LED (D5) has inverted logic */
    PORTD |= (1 << PORTD5);
  b4:	5d 9a       	sbi	0x0b, 5	; 11
    PORTC &= ~(1 << PORTC7);
  b6:	47 98       	cbi	0x08, 7	; 8
    PORTD &= ~(1 << PORTD6);
  b8:	5e 98       	cbi	0x0b, 6	; 11
    PORTB &= ~(1 << PORTB6);
  ba:	2e 98       	cbi	0x05, 6	; 5

    /* Initialize button A */
    DDRB &= ~(1 << DDB3);
  bc:	23 98       	cbi	0x04, 3	; 4
    PORTB |= (1 << PB3);
  be:	2b 9a       	sbi	0x05, 3	; 5

    /* Timer 1 Initialization
     *
     * The goal is to count milliseconds using Timer 1
     */
    TCCR1B = (1 << CS11) | (1 << CS10) | (1 << WGM12);
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 249;
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 89 00 	sts	0x0089, r25
  ce:	80 93 88 00 	sts	0x0088, r24
    TCNT1 = 0x0000;
  d2:	10 92 85 00 	sts	0x0085, r1
  d6:	10 92 84 00 	sts	0x0084, r1
    TIMSK1 = (1 << OCIE1A);
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	20 93 6f 00 	sts	0x006F, r18
     * The goal is to toggle an LED at 1Hz using Timer 3.
     * While in theory you can drift more with a higher prescaler (or maybe that
     * doens't happen on avr?), I've had better luck getting good timing with
     * the large prescaler.
     */
    TCCR3B = (1 << CS12) | (1 << CS10) | (1 << WGM32);
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	80 93 91 00 	sts	0x0091, r24
    OCR3A = 15624;
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	9d e3       	ldi	r25, 0x3D	; 61
  ea:	90 93 99 00 	sts	0x0099, r25
  ee:	80 93 98 00 	sts	0x0098, r24
    TCNT3 = 0x0000;
  f2:	10 92 95 00 	sts	0x0095, r1
  f6:	10 92 94 00 	sts	0x0094, r1
    TIMSK3 = (1 << OCIE3A);
  fa:	20 93 71 00 	sts	0x0071, r18

    /* Disable USB Interrupts to avoid issues with transitioning from program
     * to execution
     */
    USBCON = 0x00;
  fe:	10 92 d8 00 	sts	0x00D8, r1

    /* Enable Interrupts */
    sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <task_intensetask>:

    /* This is not the smallest type this can be. But hey, what's two bytes? */
    uint32_t i;

    /* First turn on the "red" LED */
    PORTD |= (1 << PORTD6);
 106:	5e 9a       	sbi	0x0b, 6	; 11
 108:	82 e8       	ldi	r24, 0x82	; 130
 10a:	9d ef       	ldi	r25, 0xFD	; 253
 10c:	a1 e0       	ldi	r26, 0x01	; 1
 10e:	b0 e0       	ldi	r27, 0x00	; 0

    /* Wait for approx 300 ms. */
    /* TODO: Check if this can be inlined with this compiler. */
    for (i = 0; i < 3*LOOP_COUNT_100MS; i++)
    {
        __asm__ __volatile__("nop");
 110:	00 00       	nop
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	a1 09       	sbc	r26, r1
 116:	b1 09       	sbc	r27, r1
    /* First turn on the "red" LED */
    PORTD |= (1 << PORTD6);

    /* Wait for approx 300 ms. */
    /* TODO: Check if this can be inlined with this compiler. */
    for (i = 0; i < 3*LOOP_COUNT_100MS; i++)
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	a1 05       	cpc	r26, r1
 11c:	b1 05       	cpc	r27, r1
 11e:	01 f4       	brne	.+0      	; 0x120 <task_intensetask+0x1a>
    {
        __asm__ __volatile__("nop");
    }

    /* Turn off "red" then turn on "yellow" */
    PORTD &= ~(1 << PORTD6);
 120:	5e 98       	cbi	0x0b, 6	; 11
    PORTB |= (1 << PORTB6);
 122:	2e 9a       	sbi	0x05, 6	; 5
 124:	8e e2       	ldi	r24, 0x2E	; 46
 126:	91 e5       	ldi	r25, 0x51	; 81
 128:	a3 e0       	ldi	r26, 0x03	; 3
 12a:	b0 e0       	ldi	r27, 0x00	; 0

    /* Wait for approx 500 ms */
    for (i = 0; i < 5*LOOP_COUNT_100MS; i++)
    {
        __asm__ __volatile__("nop");
 12c:	00 00       	nop
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	a1 09       	sbc	r26, r1
 132:	b1 09       	sbc	r27, r1
    /* Turn off "red" then turn on "yellow" */
    PORTD &= ~(1 << PORTD6);
    PORTB |= (1 << PORTB6);

    /* Wait for approx 500 ms */
    for (i = 0; i < 5*LOOP_COUNT_100MS; i++)
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	a1 05       	cpc	r26, r1
 138:	b1 05       	cpc	r27, r1
 13a:	01 f4       	brne	.+0      	; 0x13c <task_intensetask+0x36>
    {
        __asm__ __volatile__("nop");
    }

    /* Turn off yellow, turn red back on */
    PORTB &= ~(1 << PORTB6);
 13c:	2e 98       	cbi	0x05, 6	; 5
    PORTD |= (1 << PORTD6);
 13e:	5e 9a       	sbi	0x0b, 6	; 11
 140:	88 e5       	ldi	r24, 0x58	; 88
 142:	97 ea       	ldi	r25, 0xA7	; 167
 144:	a2 e0       	ldi	r26, 0x02	; 2
 146:	b0 e0       	ldi	r27, 0x00	; 0

    /* Wait for approx 400 ms */
    for (i = 0; i < 4*LOOP_COUNT_100MS; i++)
    {
        __asm__ __volatile__("nop");
 148:	00 00       	nop
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	a1 09       	sbc	r26, r1
 14e:	b1 09       	sbc	r27, r1
    /* Turn off yellow, turn red back on */
    PORTB &= ~(1 << PORTB6);
    PORTD |= (1 << PORTD6);

    /* Wait for approx 400 ms */
    for (i = 0; i < 4*LOOP_COUNT_100MS; i++)
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	a1 05       	cpc	r26, r1
 154:	b1 05       	cpc	r27, r1
 156:	01 f4       	brne	.+0      	; 0x158 <task_intensetask+0x52>
    {
        __asm__ __volatile__("nop");
    }

    /* Turn off the LEDs (yellow is already off) */
    PORTD &= ~(1 << PORTD6);
 158:	5e 98       	cbi	0x0b, 6	; 11
 15a:	08 95       	ret

Disassembly of section .text.startup:

00000000 <main>:

int main()
{
    uint32_t previous_time = 0;
    uint32_t current_time;
    init();
   0:	0e 94 00 00 	call	0	; 0x0 <main>

}

int main()
{
    uint32_t previous_time = 0;
   4:	c1 2c       	mov	r12, r1
   6:	d1 2c       	mov	r13, r1
   8:	76 01       	movw	r14, r12
        {
            current_time = time_ms;
        }

        if ((current_time - previous_time) > 250) {
            PORTD ^= (1 << PORTD5);
   a:	c0 e2       	ldi	r28, 0x20	; 32
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   c:	f8 94       	cli
    while (1)
    {
      /* Toggle the green LED based on the system time. */
        ATOMIC_BLOCK(ATOMIC_FORCEON)
        {
            current_time = time_ms;
   e:	80 91 00 00 	lds	r24, 0x0000
  12:	90 91 00 00 	lds	r25, 0x0000
  16:	a0 91 00 00 	lds	r26, 0x0000
  1a:	b0 91 00 00 	lds	r27, 0x0000
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
  1e:	78 94       	sei
        }

        if ((current_time - previous_time) > 250) {
  20:	ac 01       	movw	r20, r24
  22:	bd 01       	movw	r22, r26
  24:	4c 19       	sub	r20, r12
  26:	5d 09       	sbc	r21, r13
  28:	6e 09       	sbc	r22, r14
  2a:	7f 09       	sbc	r23, r15
  2c:	4b 3f       	cpi	r20, 0xFB	; 251
  2e:	51 05       	cpc	r21, r1
  30:	61 05       	cpc	r22, r1
  32:	71 05       	cpc	r23, r1
  34:	00 f0       	brcs	.+0      	; 0x36 <main+0x36>
            PORTD ^= (1 << PORTD5);
  36:	2b b1       	in	r18, 0x0b	; 11
  38:	2c 27       	eor	r18, r28
  3a:	2b b9       	out	0x0b, r18	; 11
  3c:	6c 01       	movw	r12, r24
  3e:	7d 01       	movw	r14, r26
        /* This messes with the timing of the green led above. We could
         * interweave the green LED check in the task, but if it were really
         * important we should preempt or break the task down into chunks that
         * take less than 250ms and start them at appropriate intervals.
         */
        if (release_flag) {
  40:	80 91 00 00 	lds	r24, 0x0000
  44:	90 91 00 00 	lds	r25, 0x0000
  48:	89 2b       	or	r24, r25
  4a:	01 f0       	breq	.+0      	; 0x4c <main+0x4c>
          task_intensetask();
  4c:	0e 94 00 00 	call	0	; 0x0 <main>
          release_flag = FALSE;
  50:	10 92 00 00 	sts	0x0000, r1
  54:	10 92 00 00 	sts	0x0000, r1
  58:	00 c0       	rjmp	.+0      	; 0x5a <__vector_32+0x10>
